https://blog.phakeapps.com/2016/10/05/products-in-multilevel-categories-with-many-to-many-relation/


Criar categorias com subcategorias

Migracao do produto

php artisan make:migration CreateProductsTable --create=products

Migração
    $table->increments('id');
    $table->string('name', 255);
    $table->float('price');
    $table->text('description');
    $table->timestamps();




Migração
php artisan make:migration CreateCategoriesTable --create=categories

Dados da migração
$table->integer('sub_category_id')->nullable()->default(null);
$table->string('name', 255);
$table->string('slug', 255)->unique();
$table->string('description', 255)->nullable();
$table->string('icon', 255)->nullable();
$table->string('imagem_destacada', 255)->nullable();
$table->timestamps();


Model
php artisan make:model Category


Fillable para o model category
protected $fillable = ['name', 'sub_category_id'];


Tabela pivot do produto com as categorias
php artisan make:migration CreateCategoryProductPivotTable --create=category_product


Migração do pivot
    $table->increments('id');
    $table->integer('product_id');
    $table->integer('category_id');
    $table->timestamps();

Cria o model do produto

php artisan make:model Product

Fillable para o produto
protected $fillable = ['name', 'description', 'price'];

Rodar as migrações

php artisan migrate


caso tenha problema ao rodar a migração porcausa do banco

coloque app\providers\AppServiceProvider no boot
         \Illuminate\Support\Facades\Schema::defaultStringLength(191);



Criar os seeds da categoria
php artisan make:seeder CategoryTableSeeder

<?php

use Carbon\Carbon;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class CategoryTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        /**
         * We are going to insert 100 categories.
         */
        $faker = Faker\Factory::create();
        for ($i = 0; $i < 100; $i++) {
            DB::table('categories')->insert([
                'name' => implode($faker->words(),' '),
                'sub_category_id' => (($i % 2) === 0) ? $this->get_random_category_id() : null,
                'created_at' => Carbon::now()->format('Y-m-d H:i:s')
            ]);
        }
    }
    private function get_random_category_id()
    {
        $random_category = \App\Category::inRandomOrder()->first();
        return !is_null($random_category) ? $random_category->id : null;
    }
}




Criar os seeds do produto
php artisan make:seeder ProductTableSeeder

<?php

use Carbon\Carbon;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
class ProductTableSeeder extends Seeder
{
    public function run()
    {
        /**
         * We are going to insert 500 products.
         */
        $faker = Faker\Factory::create();
        for ($i = 0; $i < 500; $i++) {
            DB::table('products')->insert([
                'name' => implode($faker->words(),' '),
                'description' => $faker->paragraph(),
                'price' => $this->mt_rand_float(0, 100),
                'created_at' => Carbon::now()->format('Y-m-d H:i:s')
            ]);
        }
    }
    //Thanks to: http://stackoverflow.com/a/38691102/867418
    private function mt_rand_float($min, $max, $countZero = '0')
    {
        $countZero = +('1' . $countZero);
        $min = floor($min * $countZero);
        $max = floor($max * $countZero);
        $rand = mt_rand($min, $max) / $countZero;
        return $rand;
    }
}



Criar os seeds da categoria do produto
php artisan make:seeder CategoryProductTableSeeder

<?php

use Carbon\Carbon;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class CategoryProductTableSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $products = \App\Product::all();
        //Categories that don't have child categories.
        $categories = \App\Category::where('id', '!=', 'sub_category_id')->get();
        foreach ($products as $product) {
            DB::table('category_product')->insert([
                'category_id' => $categories->random()->id,
                'product_id' => $product->id,
                'created_at' => Carbon::now()->format('Y-m-d H:i:s')
            ]);
        }
    }
}



Adicionado o relacionamento com produto na categoria

public function products()
{
    return $this->belongsToMany(Product::class);
}

Adicionando o relacionamento com a categoria no produto

public function categories()
{
    return $this->belongsToMany(Category::class);
}


Adicionando auto ralacionamento na categoria

public function parent()
{
    return $this->belongsTo(self::class, 'sub_category_id');
}

public function children()
{
    return $this->hasMany(self::class, 'sub_category_id');
}
